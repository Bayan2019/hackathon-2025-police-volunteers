// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_tokens.sql

package database

import (
	"context"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens(token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    ?, 
    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, ?, 
    ?, NULL
)
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    int64
	ExpiresAt string
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const getRefreshTokenOfUser = `-- name: GetRefreshTokenOfUser :one

SELECT token FROM refresh_tokens
WHERE user_id = ?
    AND revoked_at IS NULL
    AND expires_at > CURRENT_TIMESTAMP
ORDER BY created_at DESC
`

func (q *Queries) GetRefreshTokenOfUser(ctx context.Context, userID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenOfUser, userID)
	var token string
	err := row.Scan(&token)
	return token, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one

SELECT users.id, users.created_at, users.updated_at, users.name, users.iin, users.phone, users.date_of_birth, users.password_hash, users.current_location FROM users
JOIN refresh_tokens ON users.id = refresh_tokens.user_id
WHERE refresh_tokens.token = ?
    AND revoked_at IS NULL
    AND expires_at > CURRENT_TIMESTAMP
ORDER BY created_at DESC
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Iin,
		&i.Phone,
		&i.DateOfBirth,
		&i.PasswordHash,
		&i.CurrentLocation,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec

UPDATE refresh_tokens
SET updated_at = CURRENT_TIMESTAMP, revoked_at = CURRENT_TIMESTAMP
WHERE token = ? AND revoked_at IS NULL
`

func (q *Queries) RevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeToken, token)
	return err
}

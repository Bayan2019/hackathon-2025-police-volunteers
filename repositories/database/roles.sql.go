// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles.sql

package database

import (
	"context"
)

const createRole = `-- name: CreateRole :one

INSERT INTO roles(title)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateRole(ctx context.Context, title string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createRole, title)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteRole = `-- name: DeleteRole :exec

DELETE FROM roles WHERE id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRoleById = `-- name: GetRoleById :one

SELECT id, title FROM roles WHERE id = ?
`

func (q *Queries) GetRoleById(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleById, id)
	var i Role
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, title FROM roles
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesOfUser = `-- name: GetRolesOfUser :many

SELECT r.id, r.title
FROM roles AS r
JOIN users_roles AS ur
ON r.id = ur.role_id
WHERE ur.user_id = ?
`

func (q *Queries) GetRolesOfUser(ctx context.Context, userID int64) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRolesOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec

UPDATE roles 
SET title = ?
WHERE id = ?
`

type UpdateRoleParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.Title, arg.ID)
	return err
}
